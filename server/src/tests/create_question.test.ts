
import { afterEach, beforeEach, describe, expect, it } from 'bun:test';
import { resetDB, createDB } from '../helpers';
import { db } from '../db';
import { usersTable, questionsTable } from '../db/schema';
import { type CreateQuestionInput } from '../schema';
import { createQuestion } from '../handlers/create_question';
import { eq } from 'drizzle-orm';

// Test input with all required fields
const testInput: CreateQuestionInput = {
  topic: 'monte_carlo',
  question_text: 'What is Monte Carlo simulation?',
  answer_key: 'Monte Carlo simulation is a computational technique...',
  max_score: 10,
  is_auto_generated: false
};

describe('createQuestion', () => {
  let lecturerId: number;
  let studentId: number;

  beforeEach(async () => {
    await createDB();

    // Create a lecturer user
    const lecturerResult = await db.insert(usersTable)
      .values({
        name: 'Dr. Test Lecturer',
        username: 'lecturer1',
        password_hash: 'hashed_password_123',
        role: 'lecturer'
      })
      .returning()
      .execute();
    lecturerId = lecturerResult[0].id;

    // Create a student user for testing authorization
    const studentResult = await db.insert(usersTable)
      .values({
        name: 'Test Student',
        nim: '12345678',
        attendance_number: 'A001',
        username: 'student1',
        password_hash: 'hashed_password_456',
        role: 'student'
      })
      .returning()
      .execute();
    studentId = studentResult[0].id;
  });

  afterEach(resetDB);

  it('should create a question successfully', async () => {
    const result = await createQuestion(testInput, lecturerId);

    // Basic field validation
    expect(result.topic).toEqual('monte_carlo');
    expect(result.question_text).toEqual('What is Monte Carlo simulation?');
    expect(result.answer_key).toEqual('Monte Carlo simulation is a computational technique...');
    expect(result.max_score).toEqual(10);
    expect(typeof result.max_score).toBe('number');
    expect(result.status).toEqual('draft');
    expect(result.is_auto_generated).toEqual(false);
    expect(result.created_by).toEqual(lecturerId);
    expect(result.id).toBeDefined();
    expect(result.created_at).toBeInstanceOf(Date);
    expect(result.updated_at).toBeInstanceOf(Date);
  });

  it('should save question to database', async () => {
    const result = await createQuestion(testInput, lecturerId);

    // Query database to verify question was saved
    const questions = await db.select()
      .from(questionsTable)
      .where(eq(questionsTable.id, result.id))
      .execute();

    expect(questions).toHaveLength(1);
    expect(questions[0].topic).toEqual('monte_carlo');
    expect(questions[0].question_text).toEqual('What is Monte Carlo simulation?');
    expect(questions[0].answer_key).toEqual('Monte Carlo simulation is a computational technique...');
    expect(parseFloat(questions[0].max_score)).toEqual(10);
    expect(questions[0].status).toEqual('draft');
    expect(questions[0].is_auto_generated).toEqual(false);
    expect(questions[0].created_by).toEqual(lecturerId);
    expect(questions[0].created_at).toBeInstanceOf(Date);
    expect(questions[0].updated_at).toBeInstanceOf(Date);
  });

  it('should create question with null answer_key', async () => {
    const inputWithoutAnswerKey: CreateQuestionInput = {
      ...testInput,
      answer_key: null
    };

    const result = await createQuestion(inputWithoutAnswerKey, lecturerId);

    expect(result.answer_key).toBeNull();
    expect(result.topic).toEqual('monte_carlo');
    expect(result.question_text).toEqual('What is Monte Carlo simulation?');
    expect(result.max_score).toEqual(10);
  });

  it('should create question with different topic', async () => {
    const inputWithDifferentTopic: CreateQuestionInput = {
      ...testInput,
      topic: 'markov_chain',
      question_text: 'Explain Markov Chain properties'
    };

    const result = await createQuestion(inputWithDifferentTopic, lecturerId);

    expect(result.topic).toEqual('markov_chain');
    expect(result.question_text).toEqual('Explain Markov Chain properties');
    expect(result.status).toEqual('draft');
  });

  it('should throw error when lecturer not found', async () => {
    const nonExistentLecturerId = 99999;

    await expect(createQuestion(testInput, nonExistentLecturerId))
      .rejects.toThrow(/lecturer not found/i);
  });

  it('should throw error when user is not a lecturer', async () => {
    await expect(createQuestion(testInput, studentId))
      .rejects.toThrow(/only lecturers can create questions/i);
  });

  it('should create auto-generated question', async () => {
    const autoGeneratedInput: CreateQuestionInput = {
      ...testInput,
      is_auto_generated: true
    };

    const result = await createQuestion(autoGeneratedInput, lecturerId);

    expect(result.is_auto_generated).toEqual(true);
    expect(result.status).toEqual('draft');
    expect(result.created_by).toEqual(lecturerId);
  });
});
